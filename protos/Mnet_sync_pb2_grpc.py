# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protos import Mnet_sync_pb2 as protos_dot_Mnet__sync__pb2


class MnetsyncStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPeers = channel.unary_unary(
        '/Mnetsync.Mnetsync/GetPeers',
        request_serializer=protos_dot_Mnet__sync__pb2.PeerDemand.SerializeToString,
        response_deserializer=protos_dot_Mnet__sync__pb2.TrustedPeerList.FromString,
        )
    self.GetAccountInfo = channel.unary_unary(
        '/Mnetsync.Mnetsync/GetAccountInfo',
        request_serializer=protos_dot_Mnet__sync__pb2.AccountDemand.SerializeToString,
        response_deserializer=protos_dot_Mnet__sync__pb2.AccountInfo.FromString,
        )
    self.ProcessTransaction = channel.unary_stream(
        '/Mnetsync.Mnetsync/ProcessTransaction',
        request_serializer=protos_dot_Mnet__sync__pb2.TransactionRequest.SerializeToString,
        response_deserializer=protos_dot_Mnet__sync__pb2.TransactionStatus.FromString,
        )
    self.ConfirmTransaction = channel.unary_unary(
        '/Mnetsync.Mnetsync/ConfirmTransaction',
        request_serializer=protos_dot_Mnet__sync__pb2.TransactionConfirmation.SerializeToString,
        response_deserializer=protos_dot_Mnet__sync__pb2.TransactionConfirmation.FromString,
        )


class MnetsyncServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetPeers(self, request, context):
    """When a peer asks for info, return your trusted peers
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAccountInfo(self, request, context):
    """Return account info when requested
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ProcessTransaction(self, request, context):
    """Process Transaction when requested - The response is a stream, until accepted or denied (pending, mempool, accepted, denied)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ConfirmTransaction(self, request, context):
    """Confirm Transaction -- Nodes open up confirmation streams on a transaction, until it has enough confirmations
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MnetsyncServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPeers': grpc.unary_unary_rpc_method_handler(
          servicer.GetPeers,
          request_deserializer=protos_dot_Mnet__sync__pb2.PeerDemand.FromString,
          response_serializer=protos_dot_Mnet__sync__pb2.TrustedPeerList.SerializeToString,
      ),
      'GetAccountInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetAccountInfo,
          request_deserializer=protos_dot_Mnet__sync__pb2.AccountDemand.FromString,
          response_serializer=protos_dot_Mnet__sync__pb2.AccountInfo.SerializeToString,
      ),
      'ProcessTransaction': grpc.unary_stream_rpc_method_handler(
          servicer.ProcessTransaction,
          request_deserializer=protos_dot_Mnet__sync__pb2.TransactionRequest.FromString,
          response_serializer=protos_dot_Mnet__sync__pb2.TransactionStatus.SerializeToString,
      ),
      'ConfirmTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.ConfirmTransaction,
          request_deserializer=protos_dot_Mnet__sync__pb2.TransactionConfirmation.FromString,
          response_serializer=protos_dot_Mnet__sync__pb2.TransactionConfirmation.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Mnetsync.Mnetsync', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
